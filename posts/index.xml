<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Nick's Blog</title><link>https://ruffles.dev/posts/</link><description>Recent content in Posts on Nick's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Fri, 07 Oct 2022 08:18:16 +0000</lastBuildDate><atom:link href="https://ruffles.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Collaborative Development with Git MIT</title><link>https://ruffles.dev/posts/gitmit/</link><pubDate>Fri, 07 Oct 2022 08:18:16 +0000</pubDate><guid>https://ruffles.dev/posts/gitmit/</guid><description>Git MIT is a collaboration tool that allows you to show on platforms such as GitHub who you were writing code with. You may have seen this before when you look at the commits for a repository, as more than one person as the author.
Installing Git mit $ brew install PurpleBooth/repo/git-mit Setting up co-authors Start off by cloing the repository that contains the co-authors you may be working with.</description></item><item><title>YubiKey 5C commit signing and SSH authentication</title><link>https://ruffles.dev/posts/yubikey/</link><pubDate>Fri, 07 Oct 2022 08:18:16 +0000</pubDate><guid>https://ruffles.dev/posts/yubikey/</guid><description>While being onboarded to my new job at EngineerBetter, I was handed a YubiKey and asked to set it up with SSH authentication and commit signing. While I had heard of GPG and used it slightly before, I wasn&amp;rsquo;t aware that you could also use it in git to sign your commits in order to prove that you were the one to commit code.
The setup for my YubiKey took me about a day, as there was issue after issue with the YubiKey, so in this guide I hope to show a relatively painless and secure setup for the YubiKey.</description></item></channel></rss>